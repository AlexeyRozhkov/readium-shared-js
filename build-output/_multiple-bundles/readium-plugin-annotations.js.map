{
  "version": 3,
  "file": "readium-plugin-annotations.js",
  "sources": [
    "backbone.js",
    "../../plugins/annotations/annotations_module.js",
    "../../plugins/annotations/annotations_manager.js",
    "../../plugins/annotations/main.js",
    "readium-plugin-annotations.js"
  ],
  "names": [],
  "mappingsxkDA,ADykDA;ACxkvoDA,ADwoDA;ACvovPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "//     Backbone.js 1.1.2\n\n//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(root, factory) {\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define('backbone',['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n    factory(root, exports, _);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n}(this, function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create local references to array methods we'll want to use later.\n  var array = [];\n  var push = array.push;\n  var slice = array.slice;\n  var splice = array.splice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.1.2';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // custom events. You may bind with `on` or remove with `off` callback\n  // functions to an event; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {\n\n    // Bind an event to a `callback` function. Passing `\"all\"` will bind\n    // the callback to all events fired.\n    on: function(name, callback, context) {\n      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\n      this._events || (this._events = {});\n      var events = this._events[name] || (this._events[name] = []);\n      events.push({callback: callback, context: context, ctx: context || this});\n      return this;\n    },\n\n    // Bind an event to only be triggered a single time. After the first time\n    // the callback is invoked, it will be removed.\n    once: function(name, callback, context) {\n      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n      var self = this;\n      var once = _.once(function() {\n        self.off(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n      return this.on(name, once, context);\n    },\n\n    // Remove one or many callbacks. If `context` is null, removes all\n    // callbacks with that function. If `callback` is null, removes all\n    // callbacks for the event. If `name` is null, removes all bound\n    // callbacks for all events.\n    off: function(name, callback, context) {\n      var retain, ev, events, names, i, l, j, k;\n      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n      if (!name && !callback && !context) {\n        this._events = void 0;\n        return this;\n      }\n      names = name ? [name] : _.keys(this._events);\n      for (i = 0, l = names.length; i < l; i++) {\n        name = names[i];\n        if (events = this._events[name]) {\n          this._events[name] = retain = [];\n          if (callback || context) {\n            for (j = 0, k = events.length; j < k; j++) {\n              ev = events[j];\n              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                  (context && context !== ev.context)) {\n                retain.push(ev);\n              }\n            }\n          }\n          if (!retain.length) delete this._events[name];\n        }\n      }\n\n      return this;\n    },\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger: function(name) {\n      if (!this._events) return this;\n      var args = slice.call(arguments, 1);\n      if (!eventsApi(this, 'trigger', name, args)) return this;\n      var events = this._events[name];\n      var allEvents = this._events.all;\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, arguments);\n      return this;\n    },\n\n    // Tell this object to stop listening to either specific events ... or\n    // to every object it's currently listening to.\n    stopListening: function(obj, name, callback) {\n      var listeningTo = this._listeningTo;\n      if (!listeningTo) return this;\n      var remove = !name && !callback;\n      if (!callback && typeof name === 'object') callback = this;\n      if (obj) (listeningTo = {})[obj._listenId] = obj;\n      for (var id in listeningTo) {\n        obj = listeningTo[id];\n        obj.off(name, callback, this);\n        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];\n      }\n      return this;\n    }\n\n  };\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Implement fancy features of the Events API such as multiple event\n  // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n  // in terms of the existing API.\n  var eventsApi = function(obj, action, name, rest) {\n    if (!name) return true;\n\n    // Handle event maps.\n    if (typeof name === 'object') {\n      for (var key in name) {\n        obj[action].apply(obj, [key, name[key]].concat(rest));\n      }\n      return false;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n  // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n  // listen to an event in another object ... keeping track of what it's\n  // listening to.\n  _.each(listenMethods, function(implementation, method) {\n    Events[method] = function(obj, name, callback) {\n      var listeningTo = this._listeningTo || (this._listeningTo = {});\n      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n      listeningTo[id] = obj;\n      if (!callback && typeof name === 'object') callback = this;\n      obj[implementation](name, callback, this);\n      return this;\n    };\n  });\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId('c');\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      var attr, attrs, unset, changes, silent, changing, prev, current;\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      unset           = options.unset;\n      silent          = options.silent;\n      changes         = [];\n      changing        = this._changing;\n      this._changing  = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n      current = this.attributes, prev = this._previousAttributes;\n\n      // Check for changes of `id`.\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n      // For each `set` attribute, update or delete the current value.\n      for (attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          this.changed[attr] = val;\n        } else {\n          delete this.changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0, l = changes.length; i < l; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var val, changed = false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      for (var attr in diff) {\n        if (_.isEqual(old[attr], (val = diff[attr]))) continue;\n        (changed || (changed = {}))[attr] = val;\n      }\n      return changed;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server. If the server's representation of the\n    // model differs from its current attributes, they will be overridden,\n    // triggering a `\"change\"` event.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        if (!model.set(model.parse(resp, options), options)) return false;\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      var attrs, method, xhr, attributes = this.attributes;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true}, options);\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !options.wait) {\n        if (!this.set(attrs, options)) return false;\n      } else {\n        if (!this._validate(attrs, options)) return false;\n      }\n\n      // Set temporary attributes if `{wait: true}`.\n      if (attrs && options.wait) {\n        this.attributes = _.extend({}, attributes, attrs);\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = model.parse(resp, options);\n        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n          return false;\n        }\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch') options.attrs = attrs;\n      xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      if (attrs && options.wait) this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n\n      var destroy = function() {\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (options.wait || model.isNew()) destroy();\n        if (success) success(model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      if (this.isNew()) {\n        options.success();\n        return false;\n      }\n      wrapError(this, options);\n\n      var xhr = this.sync('delete', this, options);\n      if (!options.wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      return base.replace(/([^\\/])$/, '$1/') + encodeURIComponent(this.id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend(options || {}, { validate: true }));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model.\n  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  _.each(modelMethods, function(method) {\n    Model.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.attributes);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analagous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model){ return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      var singular = !_.isArray(models);\n      models = singular ? [models] : _.clone(models);\n      options || (options = {});\n      var i, l, index, model;\n      for (i = 0, l = models.length; i < l; i++) {\n        model = models[i] = this.get(models[i]);\n        if (!model) continue;\n        delete this._byId[model.id];\n        delete this._byId[model.cid];\n        index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n        this._removeReference(model, options);\n      }\n      return singular ? models[0] : models;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      options = _.defaults({}, options, setOptions);\n      if (options.parse) models = this.parse(models, options);\n      var singular = !_.isArray(models);\n      models = singular ? (models ? [models] : []) : _.clone(models);\n      var i, l, id, model, attrs, existing, sort;\n      var at = options.at;\n      var targetModel = this.model;\n      var sortable = this.comparator && (at == null) && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n      var toAdd = [], toRemove = [], modelMap = {};\n      var add = options.add, merge = options.merge, remove = options.remove;\n      var order = !sortable && add && remove ? [] : false;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      for (i = 0, l = models.length; i < l; i++) {\n        attrs = models[i] || {};\n        if (attrs instanceof Model) {\n          id = model = attrs;\n        } else {\n          id = attrs[targetModel.prototype.idAttribute || 'id'];\n        }\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(id)) {\n          if (remove) modelMap[existing.cid] = true;\n          if (merge) {\n            attrs = attrs === model ? model.attributes : attrs;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(attrs, options);\n          if (!model) continue;\n          toAdd.push(model);\n          this._addReference(model, options);\n        }\n\n        // Do not add multiple models with the same `id`.\n        model = existing || model;\n        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);\n        modelMap[model.id] = true;\n      }\n\n      // Remove nonexistent models if appropriate.\n      if (remove) {\n        for (i = 0, l = this.length; i < l; ++i) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this.remove(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      if (toAdd.length || (order && order.length)) {\n        if (sortable) sort = true;\n        this.length += toAdd.length;\n        if (at != null) {\n          for (i = 0, l = toAdd.length; i < l; i++) {\n            this.models.splice(at + i, 0, toAdd[i]);\n          }\n        } else {\n          if (order) this.models.length = 0;\n          var orderedModels = order || toAdd;\n          for (i = 0, l = orderedModels.length; i < l; i++) {\n            this.models.push(orderedModels[i]);\n          }\n        }\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort events.\n      if (!options.silent) {\n        for (i = 0, l = toAdd.length; i < l; i++) {\n          (model = toAdd[i]).trigger('add', model, this, options);\n        }\n        if (sort || (order && order.length)) this.trigger('sort', this, options);\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options || (options = {});\n      for (var i = 0, l = this.models.length; i < l; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      if (_.isEmpty(attrs)) return first ? void 0 : [];\n      return this[first ? 'find' : 'filter'](function(model) {\n        for (var key in attrs) {\n          if (attrs[key] !== model.get(key)) return false;\n        }\n        return true;\n      });\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      // Run sort based on type of `comparator`.\n      if (_.isString(this.comparator) || this.comparator.length === 1) {\n        this.models = this.sortBy(this.comparator, this);\n      } else {\n        this.models.sort(_.bind(this.comparator, this));\n      }\n\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return _.invoke(this.models, 'get', attr);\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success(collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      if (!(model = this._prepareModel(model, options))) return false;\n      if (!options.wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(model, resp) {\n        if (options.wait) collection.add(model, options);\n        if (success) success(model, resp, options);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models);\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (attrs instanceof Model) return attrs;\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      if (model.id != null) this._byId[model.id] = model;\n      if (!model.collection) model.collection = this;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'destroy') this.remove(model, options);\n      if (model && event === 'change:' + model.idAttribute) {\n        delete this._byId[model.previous(model.idAttribute)];\n        if (model.id != null) this._byId[model.id] = model;\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\n    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\n    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\n    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\n    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',\n    'lastIndexOf', 'isEmpty', 'chain', 'sample'];\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  _.each(methods, function(method) {\n    Collection.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.models);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Underscore methods that take a property name as an argument.\n  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];\n\n  // Use attributes instead of properties.\n  _.each(attributeMethods, function(method) {\n    Collection.prototype[method] = function(value, context) {\n      var iterator = _.isFunction(value) ? value : function(model) {\n        return model.get(value);\n      };\n      return _[method](this.models, iterator, context);\n    };\n  });\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be merged as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this.$el.remove();\n      this.stopListening();\n      return this;\n    },\n\n    // Change the view's element (`this.el` property), including event\n    // re-delegation.\n    setElement: function(element, delegate) {\n      if (this.$el) this.undelegateEvents();\n      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n      this.el = this.$el[0];\n      if (delegate !== false) this.delegateEvents();\n      return this;\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    // This only works for delegate-able events: not `focus`, `blur`, and\n    // not `change`, `submit`, and `reset` in Internet Explorer.\n    delegateEvents: function(events) {\n      if (!(events || (events = _.result(this, 'events')))) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[events[key]];\n        if (!method) continue;\n\n        var match = key.match(delegateEventSplitter);\n        var eventName = match[1], selector = match[2];\n        method = _.bind(method, this);\n        eventName += '.delegateEvents' + this.cid;\n        if (selector === '') {\n          this.$el.on(eventName, method);\n        } else {\n          this.$el.on(eventName, selector, method);\n        }\n      }\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view with `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\n        this.setElement($el, false);\n      } else {\n        this.setElement(_.result(this, 'el'), false);\n      }\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // If we're sending a `PATCH` request, and we're in an old Internet Explorer\n    // that still has ActiveX enabled by default, override jQuery to use that\n    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\n    if (params.type === 'PATCH' && noXhrPatch) {\n      params.xhr = function() {\n        return new ActiveXObject(\"Microsoft.XMLHTTP\");\n      };\n    }\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  var noXhrPatch =\n    typeof window !== 'undefined' && !!window.ActiveXObject &&\n      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch':  'PATCH',\n    'delete': 'DELETE',\n    'read':   'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        router.execute(callback, args);\n        router.trigger.apply(router, ['route:' + name].concat(args));\n        router.trigger('route', name, args);\n        Backbone.history.trigger('route', router, name, args);\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    _.bindAll(this, 'checkUrl');\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for detecting MSIE.\n  var isExplorer = /msie [\\w.]+/;\n\n  // Cached regex for removing a trailing slash.\n  var trailingSlash = /\\/$/;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      return this.location.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the cross-browser normalized URL fragment, either from the URL,\n    // the hash, or the override.\n    getFragment: function(fragment, forcePushState) {\n      if (fragment == null) {\n        if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n          fragment = decodeURI(this.location.pathname + this.location.search);\n          var root = this.root.replace(trailingSlash, '');\n          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error(\"Backbone.history has already been started\");\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);\n      var fragment          = this.getFragment();\n      var docMode           = document.documentMode;\n      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      if (oldIE && this._wantsHashChange) {\n        var frame = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\">');\n        this.iframe = frame.hide().appendTo('body')[0].contentWindow;\n        this.navigate(fragment);\n      }\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._hasPushState) {\n        Backbone.$(window).on('popstate', this.checkUrl);\n      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n        Backbone.$(window).on('hashchange', this.checkUrl);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      // Determine if we need to change the base url, for a pushState link\n      // opened by a non-pushState browser.\n      this.fragment = fragment;\n      var loc = this.location;\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          this.fragment = this.getFragment(null, true);\n          this.location.replace(this.root + '#' + this.fragment);\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot() && loc.hash) {\n          this.fragment = this.getHash().replace(routeStripper, '');\n          this.history.replaceState({}, document.title, this.root + this.fragment);\n        }\n\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n      if (current === this.fragment && this.iframe) {\n        current = this.getFragment(this.getHash(this.iframe));\n      }\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.any(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n      // Strip the hash for matching.\n      fragment = fragment.replace(pathStripper, '');\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // Don't include a trailing slash on the root.\n      if (fragment === '' && url !== '/') url = url.slice(0, -1);\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._hasPushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if(!options.replace) this.iframe.document.open().close();\n          this._updateHash(this.iframe.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain, for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent's constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function.\n    var Surrogate = function(){ this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate;\n\n    // Add prototype properties (instance properties) to the subclass,\n    // if supplied.\n    if (protoProps) _.extend(child.prototype, protoProps);\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error(model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n\n}));\n\n",
    "define('plugin-annotations/annotations_module',['backbone'], function(Backbone) {\nvar EpubAnnotationsModule = function (contentDocumentDOM, bbPageSetView, annotationCSSUrl) {\n    \n    var EpubAnnotations = {};\n\n    // Rationale: The order of these matters\n    EpubAnnotations.TextLineInferrer = Backbone.Model.extend({\n\n    initialize : function (attributes, options) {},\n\n    // ----------------- PUBLIC INTERFACE --------------------------------------------------------------\n\n    inferLines : function (rectList) {\n\n        var inferredLines = [];\n        var numRects = rectList.length;\n        var numLines = 0;\n        var currLine;\n        var currRect;\n        var rectAppended;\n\n        // Iterate through each rect\n        for (var currRectNum = 0; currRectNum <= numRects - 1; currRectNum++) {\n            currRect = rectList[currRectNum];\n\n            // Check if the rect can be added to any of the current lines\n            rectAppended = false;\n            for (var currLineNum = 0; currLineNum <= numLines - 1; currLineNum++) {\n                currLine = inferredLines[currLineNum];\n\n                if (this.includeRectInLine(currLine, currRect.top, currRect.left, currRect.width, currRect.height)) {\n                    this.expandLine(currLine, currRect.left, currRect.top, currRect.width, currRect.height);\n                    rectAppended = true;\n                    break;   \n                }\n            } \n            \n            if (rectAppended) {\n                continue;\n            }\n            // If the rect can't be added to any existing lines, create a new line\n            else {\n                inferredLines.push(this.createNewLine(currRect.left, currRect.top, currRect.width, currRect.height));\n                numLines = numLines + 1; // Update the number of lines, so we're not using .length on every iteration\n            }\n        }\n\n        return inferredLines;\n    },\n\n\n    // ----------------- PRIVATE HELPERS ---------------------------------------------------------------\n\n    includeRectInLine : function (currLine, rectTop, rectLeft, rectWidth, rectHeight) {\n\n        // is on an existing line : based on vertical position\n        if (this.rectIsWithinLineVertically(rectTop, rectHeight, currLine.maxTop, currLine.maxBottom)) {\n            if (this.rectIsWithinLineHorizontally(rectLeft, rectWidth, currLine.left, currLine.width, currLine.avgHeight)) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    rectIsWithinLineVertically : function (rectTop, rectHeight, currLineMaxTop, currLineMaxBottom) {\n\n        var rectBottom = rectTop + rectHeight;\n        var lineHeight = currLineMaxBottom - currLineMaxTop;\n        var lineHeightAdjustment = (lineHeight * 0.75) / 2;\n        var rectHeightAdjustment = (rectHeight * 0.75) / 2;\n\n        rectTop = rectTop + rectHeightAdjustment;\n        rectBottom = rectBottom - rectHeightAdjustment;\n        currLineMaxTop = currLineMaxTop + lineHeightAdjustment;\n        currLineMaxBottom = currLineMaxBottom - lineHeightAdjustment;\n\n        if (rectTop === currLineMaxTop && rectBottom === currLineMaxBottom) {\n            return true;\n        }\n        else if (rectTop < currLineMaxTop && rectBottom < currLineMaxBottom && rectBottom > currLineMaxTop) {\n            return true;\n        }\n        else if (rectTop > currLineMaxTop && rectBottom > currLineMaxBottom && rectTop < currLineMaxBottom) {\n            return true;\n        }\n        else if (rectTop > currLineMaxTop && rectBottom < currLineMaxBottom) {\n            return true;\n        }\n        else if (rectTop < currLineMaxTop && rectBottom > currLineMaxBottom) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    },\n\n    rectIsWithinLineHorizontally : function (rectLeft, rectWidth, currLineLeft, currLineWidth, currLineAvgHeight) {\n\n        var lineGapHeuristic = 2 * currLineAvgHeight;\n        var rectRight = rectLeft + rectWidth;\n        var currLineRight = rectLeft + currLineWidth;\n\n        if ((currLineLeft - rectRight) > lineGapHeuristic) {\n            return false;\n        }\n        else if ((rectLeft - currLineRight) > lineGapHeuristic) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    },\n\n    createNewLine : function (rectLeft, rectTop, rectWidth, rectHeight) {\n\n        var maxBottom = rectTop + rectHeight;\n\n        return {\n            left : rectLeft,\n            startTop : rectTop,\n            width : rectWidth, \n            avgHeight : rectHeight, \n            maxTop : rectTop,\n            maxBottom : maxBottom,\n            numRects : 1\n        };\n    },\n\n    expandLine : function (currLine, rectLeft, rectTop, rectWidth, rectHeight) {\n\n        var lineOldRight = currLine.left + currLine.width; \n\n        // Update all the properties of the current line with rect dimensions\n        var rectRight = rectLeft + rectWidth;\n        var rectBottom = rectTop + rectHeight;\n        var numRectsPlusOne = currLine.numRects + 1;\n\n        // Average height calculation\n        var currSumHeights = currLine.avgHeight * currLine.numRects;\n        var avgHeight = ((currSumHeights + rectHeight) / numRectsPlusOne);\n        currLine.avgHeight = avgHeight;\n        currLine.numRects = numRectsPlusOne;\n\n        // Expand the line vertically\n        currLine = this.expandLineVertically(currLine, rectTop, rectBottom);\n        currLine = this.expandLineHorizontally(currLine, rectLeft, rectRight);        \n\n        return currLine;\n    },\n\n    expandLineVertically : function (currLine, rectTop, rectBottom) {\n\n        if (rectTop < currLine.maxTop) {\n            currLine.maxTop = rectTop;\n        } \n        if (rectBottom > currLine.maxBottom) {\n            currLine.maxBottom = rectBottom;\n        }\n\n        return currLine;\n    },\n\n    expandLineHorizontally : function (currLine, rectLeft, rectRight) {\n\n        var newLineLeft = currLine.left <= rectLeft ? currLine.left : rectLeft;\n        var lineRight = currLine.left + currLine.width;\n        var newLineRight = lineRight >= rectRight ? lineRight : rectRight;\n        var newLineWidth = newLineRight - newLineLeft;\n        currLine.left = newLineLeft;\n        currLine.width = newLineWidth;\n\n        return currLine;\n    }\n});\n    EpubAnnotations.Highlight = Backbone.Model.extend({\n\n    defaults : {\n        \"isVisible\" : false\n    },\n\n    initialize : function (attributes, options) {}\n});\n    EpubAnnotations.HighlightGroup = Backbone.Model.extend({\n\n    defaults : function () {\n        return {\n            \"selectedNodes\" : [],\n            \"highlightViews\" : []\n        };\n    },\n\n    initialize : function (attributes, options) {\n        this.set(\"scale\", attributes.scale);\n        this.constructHighlightViews();\n    },\n\n    // --------------- PRIVATE HELPERS ---------------------------------------\n\n    highlightGroupCallback : function (event) {\n\n        var that = this;\n        \n        // Trigger this event on each of the highlight views (except triggering event)\n        if (event.type === \"click\") {\n            that.get(\"bbPageSetView\").trigger(\"annotationClicked\", \"highlight\", that.get(\"CFI\"), that.get(\"id\"), event);\n            return;\n        }\n\n\n        // Trigger this event on each of the highlight views (except triggering event)\n        if (event.type === \"contextmenu\") {\n            that.get(\"bbPageSetView\").trigger(\"annotationRightClicked\", \"highlight\", that.get(\"CFI\"), that.get(\"id\"), event);\n            return;\n        }\n\n\n        // Events that are called on each member of the group\n        _.each(this.get(\"highlightViews\"), function (highlightView) {\n\n            if (event.type === \"mouseenter\") {\n                highlightView.setHoverHighlight();    \n            }\n            else if (event.type === \"mouseleave\") {\n                highlightView.setBaseHighlight();\n            }\n        });\n    },\n\n    constructHighlightViews : function () {\n\n        var that = this;\n        var rectList = [];\n        var inferrer;\n        var inferredLines;\n\n        _.each(this.get(\"selectedNodes\"), function (node, index) {\n\n            var rects;\n            var range = document.createRange();\n            range.selectNodeContents(node);\n            rects = range.getClientRects();\n\n            // REFACTORING CANDIDATE: Maybe a better way to append an array here\n            _.each(rects, function (rect) {\n                rectList.push(rect);\n            });\n        });\n\n        inferrer = new EpubAnnotations.TextLineInferrer();\n        inferredLines = inferrer.inferLines(rectList);\n\n        var scale = this.get(\"scale\");\n\n        _.each(inferredLines, function (line, index) {\n\n            var highlightTop = line.startTop / scale;;\n            var highlightLeft = line.left / scale;;\n            var highlightHeight = line.avgHeight / scale;\n            var highlightWidth = line.width / scale;;\n\n            var highlightView = new EpubAnnotations.HighlightView({\n                CFI : that.get(\"CFI\"),\n                top : highlightTop + that.get(\"offsetTopAddition\"),\n                left : highlightLeft + that.get(\"offsetLeftAddition\"),\n                height : highlightHeight,\n                width : highlightWidth,\n                styles : that.get('styles'),\n                highlightGroupCallback : that.highlightGroupCallback,\n                callbackContext : that\n            });\n\n            that.get(\"highlightViews\").push(highlightView);\n        });\n    },\n\n    resetHighlights : function (viewportElement, offsetTop, offsetLeft) {\n\n        if (offsetTop) {\n            this.set({ offsetTopAddition : offsetTop });\n        }\n        if (offsetLeft) {\n            this.set({ offsetLeftAddition : offsetLeft });\n        }\n\n        this.destroyCurrentHighlights();\n        this.constructHighlightViews();\n        this.renderHighlights(viewportElement);\n    },\n\n    // REFACTORING CANDIDATE: Ensure that event listeners are being properly cleaned up. \n    destroyCurrentHighlights : function () { \n\n        _.each(this.get(\"highlightViews\"), function (highlightView) {\n            highlightView.remove();\n            highlightView.off();\n        });\n\n        this.get(\"highlightViews\").length = 0;\n    },\n\n    renderHighlights : function (viewportElement) {\n\n        _.each(this.get(\"highlightViews\"), function (view, index) {\n            $(viewportElement).append(view.render());\n        });\n    },\n\n    toInfo : function () {\n\n        return {\n\n            id : this.get(\"id\"),\n            type : \"highlight\",\n            CFI : this.get(\"CFI\")\n        };\n    },\n\n    setStyles : function (styles) {\n        var highlightViews = this.get('highlightViews');\n\n        this.set({styles : styles});\n\n        _.each(highlightViews, function(view, index) {\n            view.setStyles(styles);\n        });\n    }\n});\n\n    EpubAnnotations.Underline = Backbone.Model.extend({\n\n    defaults : {\n        \"isVisible\" : false\n    },\n\n    initialize : function (attributes, options) {}\n});\n    EpubAnnotations.UnderlineGroup = Backbone.Model.extend({\n\n    defaults : function () {\n        return {\n            \"selectedNodes\" : [],\n            \"underlineViews\" : []\n        };\n    },\n\n    initialize : function (attributes, options) {\n\n        this.constructUnderlineViews();\n    },\n\n    // --------------- PRIVATE HELPERS ---------------------------------------\n\n    underlineGroupCallback : function (event) {\n\n        var that = this;\n\n        // Trigger this event on each of the underline views (except triggering event)\n        if (event.type === \"click\") {\n            that.get(\"bbPageSetView\").trigger(\"annotationClicked\", \"underline\", that.get(\"CFI\"), that.get(\"id\"), event);\n            return;\n        }\n\n        // Events that are called on each member of the group\n        _.each(this.get(\"underlineViews\"), function (underlineView) {\n\n            if (event.type === \"mouseenter\") {\n                underlineView.setHoverUnderline();\n            }\n            else if (event.type === \"mouseleave\") {\n                underlineView.setBaseUnderline();\n            }\n        });\n    },\n\n    constructUnderlineViews : function () {\n\n        var that = this;\n        var rectList = [];\n        var inferrer;\n        var inferredLines;\n\n        _.each(this.get(\"selectedNodes\"), function (node, index) {\n\n            var rects;\n            var range = document.createRange();\n            range.selectNodeContents(node);\n            rects = range.getClientRects();\n\n            // REFACTORING CANDIDATE: Maybe a better way to append an array here\n            _.each(rects, function (rect) {\n                rectList.push(rect);\n            });\n        });\n\n        inferrer = new EpubAnnotations.TextLineInferrer();\n        inferredLines = inferrer.inferLines(rectList);\n\n        _.each(inferredLines, function (line, index) {\n\n            var underlineTop = line.startTop;\n            var underlineLeft = line.left;\n            var underlineHeight = line.avgHeight;\n            var underlineWidth = line.width;\n\n            var underlineView = new EpubAnnotations.UnderlineView({\n                CFI : that.get(\"CFI\"),\n                top : underlineTop + that.get(\"offsetTopAddition\"),\n                left : underlineLeft + that.get(\"offsetLeftAddition\"),\n                height : underlineHeight,\n                width : underlineWidth,\n                styles : that.get(\"styles\"),\n                underlineGroupCallback : that.underlineGroupCallback,\n                callbackContext : that\n            });\n\n            that.get(\"underlineViews\").push(underlineView);\n        });\n    },\n\n    resetUnderlines : function (viewportElement, offsetTop, offsetLeft) {\n\n        if (offsetTop) {\n            this.set({ offsetTopAddition : offsetTop });\n        }\n        if (offsetLeft) {\n            this.set({ offsetLeftAddition : offsetLeft });\n        }\n\n        this.destroyCurrentUnderlines();\n        this.constructUnderlineViews();\n        this.renderUnderlines(viewportElement);\n    },\n\n    // REFACTORING CANDIDATE: Ensure that event listeners are being properly cleaned up. \n    destroyCurrentUnderlines : function () { \n\n        _.each(this.get(\"underlineViews\"), function (underlineView) {\n            underlineView.remove();\n            underlineView.off();\n        });\n\n        this.get(\"underlineViews\").length = 0;\n    },\n\n    renderUnderlines : function (viewportElement) {\n\n        _.each(this.get(\"underlineViews\"), function (view, index) {\n            $(viewportElement).append(view.render());\n        });\n    },\n\n    toInfo : function () {\n\n        return {\n\n            id : this.get(\"id\"),\n            type : \"underline\",\n            CFI : this.get(\"CFI\")\n        };\n    },\n\n    setStyles : function (styles) {\n        \n        var underlineViews = this.get('underlineViews');\n\n        this.set({styles : styles});\n\n        _.each(underlineViews, function(view, index) {\n            view.setStyles(styles);\n        });\n    },\n});\n\n    EpubAnnotations.Bookmark = Backbone.Model.extend({\n\n    defaults : {\n        \"isVisible\" : false,\n        \"bookmarkCenteringAdjustment\" : 15,\n        \"bookmarkTopAdjustment\" : 45\n    },\n\n    initialize : function (attributes, options) {\n\n        // Figure out the top and left of the bookmark\n        // This should include the additional offset provided by the annotations object\n    },\n\n    getAbsoluteTop : function () {\n\n        var targetElementTop = $(this.get(\"targetElement\")).offset().top;\n        var bookmarkAbsoluteTop = this.get(\"offsetTopAddition\") + targetElementTop - this.get(\"bookmarkTopAdjustment\");\n        return bookmarkAbsoluteTop;\n    },\n\n    getAbsoluteLeft : function () {\n\n        var targetElementLeft = $(this.get(\"targetElement\")).offset().left;\n        var bookmarkAbsoluteLeft = this.get(\"offsetLeftAddition\") + targetElementLeft - this.get(\"bookmarkCenteringAdjustment\");\n        return bookmarkAbsoluteLeft;\n    },\n\n    toInfo : function () {\n\n        return {\n\n            id : this.get(\"id\"),\n            type : \"bookmark\",\n            CFI : this.get(\"CFI\")\n        };\n    }\n});\n    EpubAnnotations.ReflowableAnnotations = Backbone.Model.extend({\n\n    initialize : function (attributes, options) {\n        \n        this.epubCFI = EPUBcfi;\n        this.annotations = new EpubAnnotations.Annotations({\n            offsetTopAddition : 0, \n            offsetLeftAddition : 0, \n            readerBoundElement : $(\"html\", this.get(\"contentDocumentDOM\"))[0],\n            scale: 0,\n            bbPageSetView : this.get(\"bbPageSetView\")\n        });\n        // inject annotation CSS into iframe \n\n        \n        var annotationCSSUrl = this.get(\"annotationCSSUrl\");\n        if (annotationCSSUrl)\n        {\n            this.injectAnnotationCSS(annotationCSSUrl);\n        }\n\n        // emit an event when user selects some text.\n        var epubWindow = $(this.get(\"contentDocumentDOM\"));\n        var self = this;\n        epubWindow.on(\"mouseup\", function(event) {\n            var range = self.getCurrentSelectionRange();\n            if (range === undefined) {\n                return;\n            }\n            if (range.startOffset - range.endOffset) {\n                self.annotations.get(\"bbPageSetView\").trigger(\"textSelectionEvent\", event);\n            }\n        });\n\n\n    },\n\n    // ------------------------------------------------------------------------------------ //\n    //  \"PUBLIC\" METHODS (THE API)                                                          //\n    // ------------------------------------------------------------------------------------ //\n\n    redraw : function () {\n\n        var leftAddition = -this.getPaginationLeftOffset();\n        this.annotations.redrawAnnotations(0, leftAddition);\n    },\n\n   removeHighlight: function(annotationId) {\n        return this.annotations.removeHighlight(annotationId)\n    },\n\n\n\n    addHighlight : function (CFI, id, type, styles) {\n\n        var CFIRangeInfo;\n        var range;\n        var rangeStartNode;\n        var rangeEndNode;\n        var selectedElements;\n        var leftAddition;\n        var startMarkerHtml = this.getRangeStartMarker(CFI, id);\n        var endMarkerHtml = this.getRangeEndMarker(CFI, id);\n\n        // TODO webkit specific?\n        var $html = $(this.get(\"contentDocumentDOM\"));\n        var matrix = $('html', $html).css('-webkit-transform');\n        var scale = new WebKitCSSMatrix(matrix).a;\n        this.set(\"scale\", scale);\n\n        try {\n            CFIRangeInfo = this.epubCFI.injectRangeElements(\n                CFI,\n                this.get(\"contentDocumentDOM\"),\n                startMarkerHtml,\n                endMarkerHtml,\n                [\"cfi-marker\", \"mo-cfi-highlight\"],\n                [],\n                [\"MathJax_Message\"]\n                );\n\n            // Get start and end marker for the id, using injected into elements\n            // REFACTORING CANDIDATE: Abstract range creation to account for no previous/next sibling, for different types of\n            //   sibiling, etc. \n            rangeStartNode = CFIRangeInfo.startElement.nextSibling ? CFIRangeInfo.startElement.nextSibling : CFIRangeInfo.startElement;\n            rangeEndNode = CFIRangeInfo.endElement.previousSibling ? CFIRangeInfo.endElement.previousSibling : CFIRangeInfo.endElement;\n            range = document.createRange();\n            range.setStart(rangeStartNode, 0);\n            range.setEnd(rangeEndNode, rangeEndNode.length);\n\n            selectionInfo = this.getSelectionInfo(range);\n            leftAddition = -this.getPaginationLeftOffset();\n\n            if (type === \"highlight\") {\n                this.annotations.set('scale', this.get('scale'));\n                this.annotations.addHighlight(CFI, selectionInfo.selectedElements, id, 0, leftAddition, CFIRangeInfo.startElement, CFIRangeInfo.endElement, styles);\n            }\n            else if (type === \"underline\") {\n                this.annotations.addUnderline(CFI, selectionInfo.selectedElements, id, 0, leftAddition, styles);\n            }\n\n            return {\n                CFI : CFI, \n                selectedElements : selectionInfo.selectedElements\n            };\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    },\n\n    addBookmark : function (CFI, id, type) {\n\n        var selectedElements;\n        var bookmarkMarkerHtml = this.getBookmarkMarker(CFI, id);\n        var $injectedElement;\n        var leftAddition;\n\n        try {\n            $injectedElement = this.epubCFI.injectElement(\n                CFI,\n                this.get(\"contentDocumentDOM\"),\n                bookmarkMarkerHtml,\n                [\"cfi-marker\", \"mo-cfi-highlight\"],\n                [],\n                [\"MathJax_Message\"]\n            );\n\n            // Add bookmark annotation here\n            leftAddition = -this.getPaginationLeftOffset();\n            this.annotations.addBookmark(CFI, $injectedElement[0], id, 0, leftAddition, type);\n\n            return {\n\n                CFI : CFI, \n                selectedElements : $injectedElement[0]\n            };\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    },\n\n    addImageAnnotation : function (CFI, id) {\n\n        var selectedElements;\n        var bookmarkMarkerHtml = this.getBookmarkMarker(CFI, id);\n        var $targetImage;\n\n        try {\n            $targetImage = this.epubCFI.getTargetElement(\n                CFI,\n                this.get(\"contentDocumentDOM\"),\n                [\"cfi-marker\", \"mo-cfi-highlight\"],\n                [],\n                [\"MathJax_Message\"]\n            );\n            this.annotations.addImageAnnotation(CFI, $targetImage[0], id);\n\n            return {\n\n                CFI : CFI, \n                selectedElements : $targetImage[0]\n            };\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    },\n\n    // this returns a partial CFI only!!\n    getCurrentSelectionCFI: function() {\n        var currentSelection = this.getCurrentSelectionRange();\n        var CFI;\n        if (currentSelection) {\n            selectionInfo = this.getSelectionInfo(currentSelection);\n            CFI = selectionInfo.CFI;\n        }\n\n        return CFI;\n    },\n\n    // this returns a partial CFI only!!\n    getCurrentSelectionOffsetCFI: function() {\n        var currentSelection = this.getCurrentSelectionRange();\n\n        var CFI;\n        if (currentSelection) {\n            CFI = this.generateCharOffsetCFI(currentSelection);\n        }\n        return CFI;\n    },\n\n\n    /// TODODM refactor thhis using getCurrentSelectionCFI (above)\n\n\n    addSelectionHighlight : function (id, type, styles) {\n\n        var arbitraryPackageDocCFI = \"/99!\"\n        var generatedContentDocCFI;\n        var CFI;\n        var selectionInfo;\n        var currentSelection = this.getCurrentSelectionRange();\n        var annotationInfo;\n\n        if (currentSelection) {\n\n            selectionInfo = this.getSelectionInfo(currentSelection);\n            generatedContentDocCFI = selectionInfo.CFI;\n            CFI = \"epubcfi(\" + arbitraryPackageDocCFI + generatedContentDocCFI + \")\";\n            if (type === \"highlight\") {\n                annotationInfo = this.addHighlight(CFI, id, type, styles);\n            }\n            else if (type === \"underline\") {\n                annotationInfo = this.addHighlight(CFI, id, type, styles);\n            }\n\n            // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of \n            //   the CFI variable in the current scope. Since this CFI variable contains a \"hacked\" CFI value -\n            //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with\n            //   the partial content document CFI portion we originally generated.\n            annotationInfo.CFI = generatedContentDocCFI;            \n            return annotationInfo;\n        }\n        else {\n            throw new Error(\"Nothing selected\");\n        }\n    },\n\n    addSelectionBookmark : function (id, type) {\n\n        var arbitraryPackageDocCFI = \"/99!\"\n        var generatedContentDocCFI;\n        var CFI;\n        var currentSelection = this.getCurrentSelectionRange();\n        var annotationInfo;\n\n        if (currentSelection) {\n\n            generatedContentDocCFI = this.generateCharOffsetCFI(currentSelection);\n            CFI = \"epubcfi(\" + arbitraryPackageDocCFI + generatedContentDocCFI + \")\";\n            annotationInfo = this.addBookmark(CFI, id, type);\n\n            // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of \n            //   the CFI variable in the current scope. Since this CFI variable contains a \"hacked\" CFI value -\n            //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with\n            //   the partial content document CFI portion we originally generated.\n            annotationInfo.CFI = generatedContentDocCFI;\n            return annotationInfo;\n        }\n        else {\n            throw new Error(\"Nothing selected\");\n        }\n    },\n\n    addSelectionImageAnnotation : function (id) {\n\n        var arbitraryPackageDocCFI = \"/99!\"\n        var generatedContentDocCFI;\n        var CFI;\n        var selectionInfo;\n        var currentSelection = this.getCurrentSelectionRange();\n        var annotationInfo;\n        var firstSelectedImage;\n\n        if (currentSelection) {\n\n            selectionInfo = this.getSelectionInfo(currentSelection, [\"img\"]);\n            firstSelectedImage = selectionInfo.selectedElements[0];\n            generatedContentDocCFI = this.epubCFI.generateElementCFIComponent(\n                firstSelectedImage,\n                [\"cfi-marker\", \"mo-cfi-highlight\"],\n                [],\n                [\"MathJax_Message\"]\n            );\n            CFI = \"epubcfi(\" + arbitraryPackageDocCFI + generatedContentDocCFI + \")\";\n            annotationInfo = this.addImageAnnotation(CFI, id);\n\n            // Rationale: The annotationInfo object returned from .addBookmark(...) contains the same value of \n            //   the CFI variable in the current scope. Since this CFI variable contains a \"hacked\" CFI value -\n            //   only the content document portion is valid - we want to replace the annotationInfo.CFI property with\n            //   the partial content document CFI portion we originally generated.\n            annotationInfo.CFI = generatedContentDocCFI;\n            return annotationInfo;\n        }\n        else {\n            throw new Error(\"Nothing selected\");\n        }\n    },\n\n    updateAnnotationView : function (id, styles) {\n\n        var annotationViews = this.annotations.updateAnnotationView(id, styles);\n\n        return annotationViews;\n    },\n\n    // ------------------------------------------------------------------------------------ //\n    //  \"PRIVATE\" HELPERS                                                                   //\n    // ------------------------------------------------------------------------------------ //\n\n    getSelectionInfo : function (selectedRange, elementType) {\n\n        // Generate CFI for selected text\n        var CFI = this.generateRangeCFI(selectedRange);\n        var intervalState = {\n            startElementFound : false,\n            endElementFound : false\n        };\n        var selectedElements = [];\n\n        if (!elementType) {\n            var elementType = [\"text\"];\n        }\n\n        this.findSelectedElements(\n            selectedRange.commonAncestorContainer, \n            selectedRange.startContainer, \n            selectedRange.endContainer,\n            intervalState,\n            selectedElements, \n            elementType\n        );\n\n        // Return a list of selected text nodes and the CFI\n        return {\n            CFI : CFI,\n            selectedElements : selectedElements\n        };\n    },\n\n    generateRangeCFI : function (selectedRange) {\n\n        var startNode = selectedRange.startContainer;\n        var endNode = selectedRange.endContainer;\n        var startOffset;\n        var endOffset;\n        var rangeCFIComponent;\n\n        if (startNode.nodeType === Node.TEXT_NODE && endNode.nodeType === Node.TEXT_NODE) {\n\n            startOffset = selectedRange.startOffset;\n            endOffset = selectedRange.endOffset;\n\n            rangeCFIComponent = this.epubCFI.generateCharOffsetRangeComponent(\n                startNode, \n                startOffset, \n                endNode, \n                endOffset,\n                [\"cfi-marker\", \"mo-cfi-highlight\"],\n                [],\n                [\"MathJax_Message\"]\n                );\n            return rangeCFIComponent;\n        }\n        else {\n            throw new Error(\"Selection start and end must be text nodes\");\n        }\n    },\n\n    generateCharOffsetCFI : function (selectedRange) {\n\n        // Character offset\n        var startNode = selectedRange.startContainer;\n        var startOffset = selectedRange.startOffset;\n        var charOffsetCFI;\n\n        if (startNode.nodeType === Node.TEXT_NODE) {\n            charOffsetCFI = this.epubCFI.generateCharacterOffsetCFIComponent(\n                startNode,\n                startOffset,\n                [\"cfi-marker\", \"mo-cfi-highlight\"],\n                [],\n                [\"MathJax_Message\"]\n            );\n        }\n        return charOffsetCFI;\n    },\n\n    // REFACTORING CANDIDATE: Convert this to jquery\n    findSelectedElements : function (currElement, startElement, endElement, intervalState, selectedElements, elementTypes) {\n\n        if (currElement === startElement) {\n            intervalState.startElementFound = true;\n        }\n\n        if (intervalState.startElementFound === true) {\n            this.addElement(currElement, selectedElements, elementTypes);\n        }\n\n        if (currElement === endElement) {\n            intervalState.endElementFound = true;\n            return;\n        }\n\n        if (currElement.firstChild) {\n            this.findSelectedElements(currElement.firstChild, startElement, endElement, intervalState, selectedElements, elementTypes);\n            if (intervalState.endElementFound) {\n                return;\n            }\n        }\n\n        if (currElement.nextSibling) {\n            this.findSelectedElements(currElement.nextSibling, startElement, endElement, intervalState, selectedElements, elementTypes);\n            if (intervalState.endElementFound) {\n                return;\n            }\n        }\n    },\n\n    addElement : function (currElement, selectedElements, elementTypes) {\n\n        // Check if the node is one of the types\n        _.each(elementTypes, function (elementType) {\n\n            if (elementType === \"text\") {\n                if (currElement.nodeType === Node.TEXT_NODE) {\n                    selectedElements.push(currElement);\n                }\n            }\n            else {\n                if ($(currElement).is(elementType)) {\n                    selectedElements.push(currElement);    \n                }\n            }\n        });\n    },\n\n    // Rationale: This is a cross-browser method to get the currently selected text\n    getCurrentSelectionRange : function () {\n\n        var currentSelection;\n        var iframeDocument = this.get(\"contentDocumentDOM\");\n        if (iframeDocument.getSelection) {\n            currentSelection = iframeDocument.getSelection();\n\n            if (currentSelection && currentSelection.rangeCount && (currentSelection.anchorOffset !== currentSelection.focusOffset)) {\n                return currentSelection.getRangeAt(0);\n            }else{\n                return undefined;\n            }\n        }\n        else if (iframeDocument.selection) {\n            return iframeDocument.selection.createRange();\n        }\n        else {\n            return undefined;\n        }\n    },\n\n    getPaginationLeftOffset : function () {\n\n        var $htmlElement = $(\"html\", this.get(\"contentDocumentDOM\"));\n        var offsetLeftPixels = $htmlElement.css(\"left\");\n        var offsetLeft = parseInt(offsetLeftPixels.replace(\"px\", \"\"));\n        return offsetLeft;\n    },\n\n    getBookmarkMarker : function (CFI, id) {\n\n        return \"<span class='bookmark-marker cfi-marker' id='\" + id + \"' data-cfi='\" + CFI + \"'></span>\";\n    },\n\n    getRangeStartMarker : function (CFI, id) {\n\n        return \"<span class='range-start-marker cfi-marker' id='start-\" + id + \"' data-cfi='\" + CFI + \"'></span>\";\n    },\n\n    getRangeEndMarker : function (CFI, id) {\n\n        return \"<span class='range-end-marker cfi-marker' id='end-\" + id + \"' data-cfi='\" + CFI + \"'></span>\";\n    },\n\n    injectAnnotationCSS : function (annotationCSSUrl) {\n\n        var $contentDocHead = $(\"head\", this.get(\"contentDocumentDOM\"));\n        $contentDocHead.append(\n            $(\"<link/>\", { rel : \"stylesheet\", href : annotationCSSUrl, type : \"text/css\" })\n        );\n    }\n});\n\n    EpubAnnotations.Annotations = Backbone.Model.extend({\n\n    defaults : function () {\n        return {\n            \"bookmarkViews\" : [],\n            \"highlights\" : [],\n            \"markers\"    : {},\n            \"underlines\" : [],\n            \"imageAnnotations\" : [],\n            \"annotationHash\" : {},\n            \"offsetTopAddition\" : 0,\n            \"offsetLeftAddition\" : 0,\n            \"readerBoundElement\" : undefined\n        };\n    },\n\n    initialize : function (attributes, options) {},\n\n\n    remove: function() {\n        var that = this;\n        _.each(this.get(\"highlights\"), function (highlightGroup) {\n            highlightGroup.remove();\n        });\n    },\n\n    redrawAnnotations : function (offsetTop, offsetLeft) {\n\n        var that = this;\n        // Highlights\n        _.each(this.get(\"highlights\"), function (highlightGroup) {\n            highlightGroup.resetHighlights(that.get(\"readerBoundElement\"), offsetTop, offsetLeft);\n        });\n\n        // Bookmarks\n        _.each(this.get(\"bookmarkViews\"), function (bookmarkView) {\n            bookmarkView.resetBookmark(offsetTop, offsetLeft);\n        });\n\n        // Underlines\n        _.each(this.get(\"underlines\"), function (underlineGroup) {\n            underlineGroup.resetUnderlines(that.get(\"readerBoundElement\"), offsetTop, offsetLeft);\n        });\n    },\n\n    getBookmark : function (id) {\n\n        var bookmarkView = this.get(\"annotationHash\")[id];\n        if (bookmarkView) {\n            return bookmarkView.bookmark.toInfo();\n        }\n        else {\n            return undefined;\n        }\n    },\n\n    getHighlight : function (id) {\n\n        var highlight = this.get(\"annotationHash\")[id];\n        if (highlight) {\n            return highlight.toInfo();\n        }\n        else {\n            return undefined;\n        }\n    },\n\n    getUnderline : function (id) {\n\n        var underline = this.get(\"annotationHash\")[id];\n        if (underline) {\n            return underline.toInfo();\n        }\n        else {\n            return undefined;\n        }\n    },\n\n    getBookmarks : function () {\n\n        var bookmarks = [];\n        _.each(this.get(\"bookmarkViews\"), function (bookmarkView) {\n\n            bookmarks.push(bookmarkView.bookmark.toInfo());\n        });\n        return bookmarks;\n    },\n\n    getHighlights : function () {\n\n        var highlights = [];\n        _.each(this.get(\"highlights\"), function (highlight) {\n\n            highlights.push(highlight.toInfo());\n        });\n        return highlights;\n    },\n\n    getUnderlines : function () {\n\n        var underlines = [];\n        _.each(this.get(\"underlines\"), function (underline) {\n\n            underlines.push(underline.toInfo());\n        });\n        return underlines;\n    },\n\n    getImageAnnotations : function () {\n\n        var imageAnnotations = [];\n        _.each(this.get(\"imageAnnotations\"), function (imageAnnotation) {\n\n            imageAnnotations.push(imageAnnotation.toInfo());\n        });\n        return imageAnnotations;\n    },\n\n    addBookmark : function (CFI, targetElement, annotationId, offsetTop, offsetLeft, type) {\n\n        if (!offsetTop) {\n            offsetTop = this.get(\"offsetTopAddition\");\n        }\n        if (!offsetLeft) {\n            offsetLeft = this.get(\"offsetLeftAddition\");\n        }\n\n        annotationId = annotationId.toString();\n        this.validateAnnotationId(annotationId);\n\n        var bookmarkView = new EpubAnnotations.BookmarkView({\n            CFI : CFI,\n            targetElement : targetElement, \n            offsetTopAddition : offsetTop,\n            offsetLeftAddition : offsetLeft,\n            id : annotationId.toString(),\n            bbPageSetView : this.get(\"bbPageSetView\"),\n            type : type\n        });\n        this.get(\"annotationHash\")[annotationId] = bookmarkView;\n        this.get(\"bookmarkViews\").push(bookmarkView);\n        $(this.get(\"readerBoundElement\")).append(bookmarkView.render());\n    },\n\n    removeHighlight: function(annotationId) {\n        var annotationHash = this.get(\"annotationHash\");\n        var highlights = this.get(\"highlights\");\n        var markers = this.get(\"markers\");\n\n        if (!markers[annotationId])\n            return;\n\n        var startMarker =  markers[annotationId].startMarker;\n        var endMarker = markers[annotationId].endMarker;\n\n        startMarker.parentNode.removeChild(startMarker);\n        endMarker.parentNode.removeChild(endMarker);\n\n        delete markers[annotationId];\n\n        delete annotationHash[annotationId];\n\n        highlights = _.reject(highlights, \n                              function(obj) { \n                                  if (obj.id == annotationId) {\n                                      obj.destroyCurrentHighlights();\n                                      return true;\n                                  } else {\n                                      return false;\n                                  }\n                              }\n                             );\n\n\n                             this.set(\"highlights\", highlights);\n    },\n\n    addHighlight : function (CFI, highlightedTextNodes, annotationId, offsetTop, offsetLeft, startMarker, endMarker, styles) {\n        if (!offsetTop) {\n            offsetTop = this.get(\"offsetTopAddition\");\n        }\n        if (!offsetLeft) {\n            offsetLeft = this.get(\"offsetLeftAddition\");\n        }\n\n        annotationId = annotationId.toString();\n        this.validateAnnotationId(annotationId);\n\n        var highlightGroup = new EpubAnnotations.HighlightGroup({\n            CFI : CFI,\n            selectedNodes : highlightedTextNodes,\n            offsetTopAddition : offsetTop,\n            offsetLeftAddition : offsetLeft,\n            styles: styles, \n            id : annotationId,\n            bbPageSetView : this.get(\"bbPageSetView\"),\n            scale: this.get(\"scale\")\n        });\n        this.get(\"annotationHash\")[annotationId] = highlightGroup;\n        this.get(\"highlights\").push(highlightGroup);\n        this.get(\"markers\")[annotationId] = {\"startMarker\": startMarker, \"endMarker\":endMarker};\n        highlightGroup.renderHighlights(this.get(\"readerBoundElement\"));\n    },\n\n    addUnderline : function (CFI, underlinedTextNodes, annotationId, offsetTop, offsetLeft, styles) {\n\n        if (!offsetTop) {\n            offsetTop = this.get(\"offsetTopAddition\");\n        }\n        if (!offsetLeft) {\n            offsetLeft = this.get(\"offsetLeftAddition\");\n        }\n\n        annotationId = annotationId.toString();\n        this.validateAnnotationId(annotationId);\n\n        var underlineGroup = new EpubAnnotations.UnderlineGroup({\n            CFI : CFI,\n            selectedNodes : underlinedTextNodes,\n            offsetTopAddition : offsetTop,\n            offsetLeftAddition : offsetLeft,\n            styles: styles,\n            id : annotationId,\n            bbPageSetView : this.get(\"bbPageSetView\")\n        });\n        this.get(\"annotationHash\")[annotationId] = underlineGroup;\n        this.get(\"underlines\").push(underlineGroup);\n        underlineGroup.renderUnderlines(this.get(\"readerBoundElement\"));\n    },\n\n    addImageAnnotation : function (CFI, imageNode, annotationId) {\n\n        annotationId = annotationId.toString();\n        this.validateAnnotationId(annotationId);\n\n        var imageAnnotation = new EpubAnnotations.ImageAnnotation({\n            CFI : CFI,\n            imageNode : imageNode,\n            id : annotationId,\n            bbPageSetView : this.get(\"bbPageSetView\")\n        });\n        this.get(\"annotationHash\")[annotationId] = imageAnnotation;\n        this.get(\"imageAnnotations\").push(imageAnnotation);\n        imageAnnotation.render();\n    },\n\n    updateAnnotationView : function (id, styles) {\n        var annotationViews = this.get(\"annotationHash\")[id];\n\n        annotationViews.setStyles(styles);\n\n        return annotationViews;\n    },\n\n    // REFACTORING CANDIDATE: Some kind of hash lookup would be more efficient here, might want to \n    //   change the implementation of the annotations as an array\n    validateAnnotationId : function (id) {\n\n        if (this.get(\"annotationHash\")[id]) {\n            throw new Error(\"That annotation id already exists; annotation not added\");\n        }\n    }\n});\n\n    EpubAnnotations.BookmarkView = Backbone.View.extend({\n\n    el : \"<div></div>\",\n\n    events : {\n        \"mouseenter\" : \"setHoverBookmark\",\n        \"mouseleave\" : \"setBaseBookmark\",\n        \"click\" : \"clickHandler\"\n    },\n\n    initialize : function (options) {\n\n        this.bookmark = new EpubAnnotations.Bookmark({\n            CFI : options.CFI,\n            targetElement : options.targetElement, \n            offsetTopAddition : options.offsetTopAddition,\n            offsetLeftAddition : options.offsetLeftAddition,\n            id : options.id,\n            bbPageSetView : options.bbPageSetView,\n            type : options.type\n        });\n    },\n\n    resetBookmark : function (offsetTop, offsetLeft) {\n\n        if (offsetTop) {\n            this.bookmark.set({ offsetTopAddition : offsetTop });\n        }\n\n        if (offsetLeft) {\n            this.bookmark.set({ offsetLeftAddition : offsetLeft });\n        }\n        this.setCSS();\n    },\n\n    render : function () {\n\n        this.setCSS();\n        return this.el;\n    },\n\n    setCSS : function () {\n\n        var absoluteTop;\n        var absoluteLeft;\n\n        if (this.bookmark.get(\"type\") === \"comment\") {\n            absoluteTop = this.bookmark.getAbsoluteTop();\n            absoluteLeft = this.bookmark.getAbsoluteLeft();\n            this.$el.css({ \n                \"top\" : absoluteTop + \"px\",\n                \"left\" : absoluteLeft + \"px\",\n                \"width\" : \"50px\",\n                \"height\" : \"50px\",\n                \"position\" : \"absolute\"\n            });\n            this.$el.addClass(\"comment\");\n        }\n        else {\n            this.$el.addClass(\"bookmark\");\n        }\n    },\n\n    setHoverBookmark : function (event) {\n\n        event.stopPropagation();\n        if (this.$el.hasClass(\"comment\")) {\n            this.$el.removeClass(\"comment\");\n            this.$el.addClass(\"hover-comment\");\n        }\n    },\n\n    setBaseBookmark : function (event) {\n\n        event.stopPropagation();\n        if (this.$el.hasClass(\"hover-comment\")) {\n            this.$el.removeClass(\"hover-comment\");\n            this.$el.addClass(\"comment\");\n        }\n    },\n\n    clickHandler : function (event) {\n\n        event.stopPropagation();\n        var type;\n        if (this.bookmark.get(\"type\") === \"comment\") {\n            type = \"comment\";\n        }\n        else {\n            type = \"bookmark\";\n        }\n\n        this.bookmark.get(\"bbPageSetView\").trigger(\"annotationClicked\", \n            type, \n            this.bookmark.get(\"CFI\"), \n            this.bookmark.get(\"id\"),\n            this.$el.css(\"top\"),\n            this.$el.css(\"left\"),\n            event\n        );\n    }\n});\n\n    EpubAnnotations.HighlightView = Backbone.View.extend({\n\n    el : \"<div class='highlight'></div>\",\n\n    events : {\n        \"mouseenter\" : \"highlightEvent\",\n        \"mouseleave\" : \"highlightEvent\",\n        \"click\" : \"highlightEvent\",\n        \"contextmenu\" : \"highlightEvent\"\n    },\n\n    initialize : function (options) {\n\n        this.highlight = new EpubAnnotations.Highlight({\n            CFI : options.CFI,\n            top : options.top,\n            left : options.left,\n            height : options.height,\n            width : options.width,\n            styles: options.styles,\n            highlightGroupCallback : options.highlightGroupCallback,\n            callbackContext : options.callbackContext\n        });\n    },\n\n    render : function () {\n\n        this.setCSS();\n        return this.el;\n    },\n\n    resetPosition : function (top, left, height, width) {\n\n        this.highlight.set({\n            top : top,\n            left : left,\n            height : height,\n            width : width\n        });\n        this.setCSS();\n    },\n\n    setStyles : function (styles) {\n\n        this.highlight.set({\n            styles : styles,\n        });\n        this.render();\n    },\n\n    setCSS : function () {\n\n        var styles = this.highlight.get(\"styles\") || {};\n        \n        this.$el.css({ \n            \"top\" : this.highlight.get(\"top\") + \"px\",\n            \"left\" : this.highlight.get(\"left\") + \"px\",\n            \"height\" : this.highlight.get(\"height\") + \"px\",\n            \"width\" : this.highlight.get(\"width\") + \"px\",\n            \"background-color\" : styles.fill_color || \"normal\",\n        });\n    },\n\n    setBaseHighlight : function () {\n\n        this.$el.addClass(\"highlight\");\n        this.$el.removeClass(\"hover-highlight\");\n    },\n\n    setHoverHighlight : function () {\n\n        this.$el.addClass(\"hover-highlight\");\n        this.$el.removeClass(\"highlight\");\n    },\n\n    highlightEvent : function (event) {\n\n        event.stopPropagation();\n        var highlightGroupCallback = this.highlight.get(\"highlightGroupCallback\");\n        var highlightGroupContext = this.highlight.get(\"callbackContext\");\n        highlightGroupContext.highlightGroupCallback(event);\n    }\n});\n\n    EpubAnnotations.UnderlineView = Backbone.View.extend({\n\n    el : \"<div class='underline-range'> \\\n             <div class='transparent-part'></div> \\\n             <div class='underline-part'></div> \\\n          </div>\",\n\n    events : {\n        \"mouseenter\" : \"underlineEvent\",\n        \"mouseleave\" : \"underlineEvent\",\n        \"click\" : \"underlineEvent\"\n    },\n\n    initialize : function (options) {\n\n        this.underline = new EpubAnnotations.Underline({\n            CFI : options.CFI,\n            top : options.top,\n            left : options.left,\n            height : options.height,\n            width : options.width,\n            styles : options.styles,\n            underlineGroupCallback : options.underlineGroupCallback,\n            callbackContext : options.callbackContext\n        });\n\n        this.$transparentElement = $(\".transparent-part\", this.$el);\n        this.$underlineElement = $(\".underline-part\", this.$el);\n    },\n\n    render : function () {\n\n        this.setCSS();\n        return this.el;\n    },\n\n    resetPosition : function (top, left, height, width) {\n\n        this.underline.set({\n            top : top,\n            left : left,\n            height : height,\n            width : width\n        });\n        this.setCSS();\n    },\n\n    setStyles : function (styles) {\n\n        this.underline.set({\n            styles : styles,\n        });\n        this.render();\n    },\n\n    setCSS : function () {\n        var styles = this.underline.get(\"styles\") || {};\n        \n        this.$el.css({ \n            \"top\" : this.underline.get(\"top\") + \"px\",\n            \"left\" : this.underline.get(\"left\") + \"px\",\n            \"height\" : this.underline.get(\"height\") + \"px\",\n            \"width\" : this.underline.get(\"width\") + \"px\",\n        });\n\n        // Underline part\n        this.$underlineElement.css({\n            \"background-color\" : styles.fill_color || \"normal\",\n        });\n\n        \n        this.$underlineElement.addClass(\"underline\");\n    },\n\n    underlineEvent : function (event) {\n\n        event.stopPropagation();\n        var underlineGroupCallback = this.underline.get(\"underlineGroupCallback\");\n        var underlineGroupContext = this.underline.get(\"callbackContext\");\n        underlineGroupContext.underlineGroupCallback(event);\n    },\n\n    setBaseUnderline : function () {\n\n        this.$underlineElement.addClass(\"underline\");\n        this.$underlineElement.removeClass(\"hover-underline\");\n    },\n\n    setHoverUnderline : function () {\n\n        this.$underlineElement.addClass(\"hover-underline\");\n        this.$underlineElement.removeClass(\"underline\");\n    },\n});\n\n    // Rationale: An image annotation does NOT have a view, as we don't know the state of an image element within an EPUB; it's entirely\n//   possible that an EPUB image element could have a backbone view associated with it already, which would cause problems if we \n//   tried to associate another backbone view. As such, this model modifies CSS properties for an annotated image element.\n//   \n//   An image annotation view that manages an absolutely position element (similar to bookmarks, underlines and highlights) can be\n//   added if more functionality is required. \n\nEpubAnnotations.ImageAnnotation = Backbone.Model.extend({\n\n    initialize : function (attributes, options) {\n\n        // Set handlers here. Can use jquery handlers\n        var that = this;\n        var $imageElement = $(this.get(\"imageNode\"));\n        $imageElement.on(\"mouseenter\", function () {\n            that.setMouseenterBorder();\n        });\n        $imageElement.on(\"mouseleave\", function () {\n            that.setMouseleaveBorder();\n        });\n        $imageElement.on(\"click\", function () {\n            that.get(\"bbPageSetView\").trigger(\"annotationClicked\", \"image\", that.get(\"CFI\"), that.get(\"id\"),event);\n        });\n    },\n\n    render : function () {\n\n        this.setCSS();\n    },\n\n    setCSS : function () {\n        \n        $(this.get(\"imageNode\")).css({\n            \"border\" : \"5px solid rgb(255, 0, 0)\",\n            \"border\" : \"5px solid rgba(255, 0, 0, 0.2)\",\n            \"-webkit-background-clip\" : \"padding-box\",\n            \"background-clip\" : \"padding-box\"\n        });\n    },\n\n    setMouseenterBorder : function () {\n\n        $(this.get(\"imageNode\")).css({\n            \"border\" : \"5px solid rgba(255, 0, 0, 0.4)\"\n        });\n    },\n\n    setMouseleaveBorder : function () {\n\n        $(this.get(\"imageNode\")).css({\n            \"border\" : \"5px solid rgba(255, 0, 0, 0.2)\"\n        });\n    }\n});\n\n\n\n    var reflowableAnnotations = new EpubAnnotations.ReflowableAnnotations({\n        contentDocumentDOM : contentDocumentDOM, \n        bbPageSetView : bbPageSetView,\n        annotationCSSUrl : annotationCSSUrl,\n    });\n\n    // Description: The public interface\n    return {\n\n        addSelectionHighlight : function (id, type, styles) { \n            return reflowableAnnotations.addSelectionHighlight(id, type, styles); \n        },\n        addSelectionBookmark : function (id, type) { \n            return reflowableAnnotations.addSelectionBookmark(id, type); \n        },\n        addSelectionImageAnnotation : function (id) {\n            return reflowableAnnotations.addSelectionImageAnnotation(id);\n        },\n        addHighlight : function (CFI, id, type, styles) { \n            return reflowableAnnotations.addHighlight(CFI, id, type, styles); \n        },\n        addBookmark : function (CFI, id, type) { \n            return reflowableAnnotations.addBookmark(CFI, id, type);\n        },\n        addImageAnnotation : function (CFI, id) { \n            return reflowableAnnotations.addImageAnnotation(CFI, id); \n        },\n        updateAnnotationView : function (id, styles) {\n            return reflowableAnnotations.updateAnnotationView(id, styles);\n        },\n        redraw : function () { \n            return reflowableAnnotations.redraw(); \n        },\n        getBookmark : function (id) { \n            return reflowableAnnotations.annotations.getBookmark(id); \n        },\n        getBookmarks : function () { \n            return reflowableAnnotations.annotations.getBookmarks(); \n        }, \n        getHighlight : function (id) { \n            return reflowableAnnotations.annotations.getHighlight(id); \n        },\n        getHighlights : function () { \n            return reflowableAnnotations.annotations.getHighlights(); \n        },\n        getUnderline : function (id) { \n            return reflowableAnnotations.annotations.getUnderline(id); \n        },\n        getUnderlines : function () { \n            return reflowableAnnotations.annotations.getUnderlines();\n        },\n        getImageAnnotation : function () {\n\n        },\n        getImageAnnotations : function () {\n\n        }, \n        removeAnnotation: function (annotationId) {\n            return reflowableAnnotations.remove(annotationId);\n        },\n        getCurrentSelectionCFI: function () {\n            return reflowableAnnotations.getCurrentSelectionCFI();\n        },\n        getCurrentSelectionOffsetCFI: function () {\n            return reflowableAnnotations.getCurrentSelectionOffsetCFI();\n        },\n        removeHighlight: function (annotationId) {\n            return reflowableAnnotations.removeHighlight(annotationId);\n        }\n    };\n};\n\n    return EpubAnnotationsModule;\n});\n",
    "//  Created by Dmitry Markushevich (dmitrym@evidentpoint.com)\n// \n//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.\n//  \n//  Redistribution and use in source and binary forms, with or without modification, \n//  are permitted provided that the following conditions are met:\n//  1. Redistributions of source code must retain the above copyright notice, this \n//  list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright notice, \n//  this list of conditions and the following disclaimer in the documentation and/or \n//  other materials provided with the distribution.\n//  3. Neither the name of the organization nor the names of its contributors may be \n//  used to endorse or promote products derived from this software without specific \n//  prior written permission.\n//  \n//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \n//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \n//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \n//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, \n//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, \n//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF \n//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE \n//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \n//  OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/*\n\n\n\n# Highlighting in Readium - A primer\n\nPlease note:\n\n- only simple text highlighting is currently supported\n- it's the job of the reading system to keep track of annotations. readium-js simply displays your annotations.\n- full CFIs for annotations are not currently available. We use so called \"partial CFI\"s, a tuple containing idref of the spine item and the CFI definition relative to the root of the spine item.\n\nCurrently, the API exposed via `ReaderView` exposes 4 functions and 1 even which should be sufficient for a simple highlighting workflow.\n\n\n# API\n\nFor the purposes of the examples below, `RReader` is a previously instantiated `ReaderView` instance.\n\n\n## Is anything selected (getCurrentSelectionCfi())\n\nBefore proceeding with the highlighting workflow it is sometimes necessary to determine whether the user has in fact selected anything. This can be accomplished with the following:\n\n\n\t> RReader.getCurrentSelectionCfi()\n\tObject {idref: \"id-id2604743\", cfi: \"/4/2/6,/1:74,/1:129\"}\n\nThe response contains a partial CFI that is sufficient to create a highlight based on selection. If nothing is selected *undefined* is returned. \n\nYou can also use partial Cfi with `openSpineItemElementCfi()` to navigate to where this selection is later.\n\n## Highlighting (addHighlight and addSelectionHighlight)\n\nOnce we've determined what needs to be highlighted (by generating a partial CFI from a selection, or having an existing partial CFI stored externally) we can add it to the reader by calling `addHighlight()`:\n\n\t> RReader.addHighlight('id-id2604743', \"/4/2/6,/1:74,/1:129\", 123, \"highlight\")\n\tObject {CFI: \"/4/2/6,/1:74,/1:129\", selectedElements: Array[1], idref: \"id-id2604743\"}\n\n*addHighligh*t takes the following parameters:\n\n- *id-id2604743* - `idref` is the idref value from `getCurrentSelectionCfi()\n- * /4/2/6,/1:74,/1:129* - `cfi` is the cfi value from `getCurrentSelectionCfi()\n- *123* - `id` is the unique id that defines this annotation\n- *highlight* - 'type' of annotation. only 'highlight' is currently supported.\n\n### addSelectioHighlight\n\nAlternatively, you can call addSelectionHighlight(). It combines both getCurrentSelectionCfi() and addHighlight into one call:\n\n\t> RReader.addSelectionHighlight(124, \"highlight\")\n\tObject {CFI: \"/4/2/4,/1:437,/1:503\", selectedElements: Array[1], idref: \"id-id2604743\"}\n\nNote that it provides no validation. If nothing is selected, `undefined` is returned.\n\n\n## Removing highlights \n\nTo remove the highlight, call `removeHighlight`:\n\n\t> RReader.removeHighlight(123)\n\tundefined\n\n\n# Handling annotation click events\n\nWhen a user clicks on a highlight `annotationClicked` event is dispatched with the following arguments:\n\n- type of annotation\n- idref of the spine item\n- partial Cfi of the annotation\n- annotationdId\n\n\n\t> RReader.on('annotationClicked', function(type, idref, cfi, annotationId) { console.log (type, idref, cfi, annotationId)});\n\tViews.ReaderView {on: function, once: function, off: function, trigger: function, listenTo: function???}\n\t\nThen when the user clicks on the highlight the following will show up in the console:\n\n\thighlight id-id2604743 /4/2/6,/1:74,/1:129 123 \n\t\n\n*/\ndefine('plugin-annotations/annotations_manager',['jquery', 'underscore', 'eventEmitter', './annotations_module'], function($, _, EventEmitter, EpubAnnotationsModule) {\n/**\n *\n * @param proxyObj\n * @param options\n * @constructor\n */\nvar AnnotationsManager = function (proxyObj, options) {\n\n    var self = this;\n    var liveAnnotations = {};\n    var spines = {};\n    var proxy = proxyObj; \n    var annotationCSSUrl = options.annotationCSSUrl;\n\n    if (!annotationCSSUrl) {\n        console.warn(\"WARNING! Annotations CSS not supplied. Highlighting is not going to work.\");\n    }\n\n    _.extend(this, new EventEmitter());\n\n    // we want to bubble up all of the events that annotations module may trigger up.\n    // this.on(\"all\", function() {\n    // });\n    //TODO: EventEmitter3 does not support \"all\" or \"*\" (catch-all event sink)\n    //https://github.com/primus/eventemitter3/blob/master/index.js#L61\n    //...so instead we patch trigger() and emit() (which are synonymous, see Bootstrapper.js EventEmitter.prototype.trigger = EventEmitter.prototype.emit;)\n        \n    var originalEmit = self['emit'];\n    \n    var triggerEmitPatch = function() {\n        var args = Array.prototype.slice.call(arguments);\nconsole.debug(args);\n\n        // mangle annotationClicked event. What really needs to happen is, the annotation_module needs to return a \n        // bare Cfi, and this class should append the idref.\n        var annotationClickedEvent = 'annotationClicked';\n        if (args.length && args[0] === annotationClickedEvent) {\n            for (var spineIndex in liveAnnotations)\n            {\n                var jQueryEvent = args[4];\n                var annotationId = args[3];\n                var fullFakeCfi = args[2];\n                var type = args[1];\n                if (liveAnnotations[spineIndex].getHighlight(annotationId)) {\n                    var idref = spines[spineIndex].idref;\n                    var partialCfi = getPartialCfi(fullFakeCfi);\n                    args = [annotationClickedEvent, type, idref, partialCfi, annotationId, jQueryEvent];\n                    \nconsole.debug(\"Corrected CFI:\");\nconsole.debug(args);\n                }\n            }\n        }\n        \n        originalEmit.apply(this, args);\n        originalEmit.apply(proxy, args);\n    };\n\n    this.trigger = triggerEmitPatch;\n    this.emit = triggerEmitPatch;\n\n    this.attachAnnotations = function($iframe, spineItem) {\n        var epubDocument = $iframe[0].contentDocument;\n        liveAnnotations[spineItem.index] = new EpubAnnotationsModule(epubDocument, self, annotationCSSUrl);\n        spines[spineItem.index] = spineItem;\n\n        // check to see which spine indecies can be culled depending on the distance from current spine item\n        for(var spineIndex in liveAnnotations) {\n            if (Math.abs(spineIndex - spineIndex.index) > 3) {\n                delete liveAnnotations[spineIndex];\n            }\n        }\n    };\n\n\n    this.getCurrentSelectionCfi = function() {\n        for(var spine in liveAnnotations) {\n            var annotationsForView = liveAnnotations[spine]; \n            var partialCfi = annotationsForView.getCurrentSelectionCFI();\n            if (partialCfi) {\n                return {\"idref\":spines[spine].idref, \"cfi\":partialCfi};\n            }\n        }\n        return undefined;\n    };\n\n    this.addSelectionHighlight = function(id, type) {\n        for(spine in liveAnnotations) {\n            var annotationsForView = liveAnnotations[spine]; \n            if (annotationsForView.getCurrentSelectionCFI()) {\n                var annotation = annotationsForView.addSelectionHighlight(id, type);\n                annotation.idref = spines[spine].idref;\n                return annotation;\n            }\n        }\n        return undefined;\n    };\n\n    this.addHighlight = function(spineIdRef, partialCfi, id, type, styles) {\n        for(var spine in liveAnnotations) {\n            if (spines[spine].idref === spineIdRef) {\n                var fakeCfi = \"epubcfi(/99!\" + partialCfi + \")\";\n                var annotationsForView = liveAnnotations[spine]; \n                var annotation = annotationsForView.addHighlight(fakeCfi, id, type, styles);\n                annotation.idref = spineIdRef;\n                annotation.CFI = getPartialCfi(annotation.CFI);\n                return annotation;\n            }\n        }\n        return undefined;\n    };\n\n    this.removeHighlight = function(id) {\n        var result = undefined;\n        for(var spine in liveAnnotations) {\n            var annotationsForView = liveAnnotations[spine]; \n            result  = annotationsForView.removeHighlight(id);\n        }\n        return result;\n    };\n\n\n\n    function getPartialCfi(CFI) {\n        var cfiWrapperPattern = new RegExp(\"^.*!\")\n        // remove epubcfi( and indirection step\n        var partiallyNakedCfi = CFI.replace(cfiWrapperPattern, \"\");\n        // remove last paren\n        var nakedCfi = partiallyNakedCfi.substring(0, partiallyNakedCfi.length -1);\n        return nakedCfi;\n    }\n\n\n};\n\nreturn AnnotationsManager;\n});\n",
    "define('plugin-annotations/main',['plugins-controller', './annotations_manager'], function (Plugins, AnnotationsManager) {\n    var config = {};\n\n    Plugins.register(\"annotations\", function (api) {\n        var _annotationsManager, _annotationsApi, _initialized = false, _initializedLate = false;\n\n        _annotationsApi = function () {\n            var self = this;\n\n            function isInitialized() {\n                if (!_initialized) {\n                    api.plugin.warn('Not initialized!')\n                }\n                return _initialized;\n            }\n\n            this.initialize = function (options) {\n                if (_initialized) {\n                    api.plugin.warn('Already initialized!');\n                    return;\n                }\n\n                _annotationsManager = new AnnotationsManager(self, options);\n\n                if (_initializedLate) {\n                    api.plugin.warn('Unable to attach to currently loaded content document.\\n' +\n                    'Initialize the plugin before loading a content document.');\n                }\n\n                _initialized = true;\n            };\n\n            /**\n             * Returns current selection partial Cfi, useful for workflows that need to check whether the user has selected something.\n             *\n             * @method getCurrentSelectionCfi\n             * @returns {object | undefined} partial cfi object or undefined if nothing is selected\n             *\n             */\n            this.getCurrentSelectionCfi = function () {\n                if (!isInitialized()) {\n                    return\n                }\n\n                return _annotationsManager.getCurrentSelectionCfi();\n            };\n\n            /**\n             * Creates a higlight based on given parameters\n             *\n             * @method addHighlight\n             * @param {string} spineIdRef spine idref that defines the partial Cfi\n             * @param {string} CFI partial CFI (withouth the indirection step) relative to the spine index\n             * @param {string} id id of the highlight. must be unique\n             * @param {string} type currently \"highlight\" only\n             *\n             * @returns {object | undefined} partial cfi object of the created highlight\n             *\n             */\n            this.addHighlight = function (spineIdRef, Cfi, id, type, styles) {\n                if (!isInitialized()) {\n                    return\n                }\n\n                return _annotationsManager.addHighlight(spineIdRef, Cfi, id, type, styles);\n            };\n\n\n            /**\n             * Creates a higlight based on current selection\n             *\n             * @method addSelectionHighlight\n             * @param {string} id id of the highlight. must be unique\n             * @param {string} type currently \"highlight\" only\n             *\n             * @returns {object | undefined} partial cfi object of the created highlight\n             *\n             */\n            this.addSelectionHighlight = function (id, type) {\n                if (!isInitialized()) {\n                    return\n                }\n\n                return _annotationsManager.addSelectionHighlight(id, type);\n            };\n\n            /**\n             * Removes given highlight\n             *\n             * @method removeHighlight\n             * @param {string} id id of the highlight.\n             *\n             * @returns {undefined}\n             *\n             */\n            this.removeHighlight = function (id) {\n                if (!isInitialized()) {\n                    return\n                }\n\n                return _annotationsManager.removeHighlight(id);\n            };\n\n        };\n\n\n        api.reader.on(ReadiumSDK.Events.CONTENT_DOCUMENT_LOADED, function ($iframe, spineItem) {\n            if (_initialized) {\n                _annotationsManager.attachAnnotations($iframe, spineItem);\n            } else {\n                _initializedLate = true;\n            }\n        });\n\n        // Extend the Reader API with the Annotations API under its own namespace\n        api.extendReader(new _annotationsApi());\n    });\n\n    return config;\n});\ndefine('plugin-annotations', ['plugin-annotations/main'], function (main) { return main; });\n\n",
    "//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.\n//  \n//  Redistribution and use in source and binary forms, with or without modification, \n//  are permitted provided that the following conditions are met:\n//  1. Redistributions of source code must retain the above copyright notice, this \n//  list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright notice, \n//  this list of conditions and the following disclaimer in the documentation and/or \n//  other materials provided with the distribution.\n//  3. Neither the name of the organization nor the names of its contributors may be \n//  used to endorse or promote products derived from this software without specific \n//  prior written permission.\n\ndefine('readium-plugin-annotations',['plugin-annotations'], function (pluginAnnotationsConfig) {\nreturn pluginAnnotationsConfig;\n});\n\n"
  ]
}