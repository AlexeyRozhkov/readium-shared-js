#####################################################################
#####################################################################

# Master source file used to generate package.json

# DEFAULT METHOD (if package.json is intact):
# npm run cson2json
#
# ALTERNATIVE METHOD (if package.json is corrupted):
# npm install cson
# node ./node_modules/cson/bin/cson2json package.cson > package.json

#####################################################################
#####################################################################

'/*': '----------------------------------------------------------------------------'
'..': 'This package.json (JSON) is automatically generated from package.cson (CSON)'
'*/': '----------------------------------------------------------------------------'

#####################################################################

name: "readium-shared-js"

version: "0.0.0"

description: "Readium - shared javascript module"

keywords: [
    "readium"
    "epub"
    "epub3"
]

author:
    name: "Readium (Daniel Weck)"
    email: "daniel.weck@gmail.com"
    url: "http://github.com/readium"

licenses: [
    type: "BSD-3-Clause"
    url: "http://opensource.org/licenses/BSD-3-Clause"
]

homepage: "http://github.com/readium/readium-shared-js"

bugs:
    url: "http://github.com/readium/readium-shared-js/issues"
    email: "daniel.weck@gmail.com"

repository:
    type: "git"
    url: "git://github.com/readium/readium-shared-js.git"

#####################################################################
dependencies:

    requirejs: "latest"

    "requirejs-text": "latest"
    
    almond: "latest"
    
    backbone: "latest"

    underscore: "latest"

    jquery: "latest"

    URIjs: "latest"

    jquerySizes: "danielweck/jsizes"
    
    eventemitter3: "latest"
    
    domReady: "requirejs/domReady"

#####################################################################
devDependencies:

    cson: "latest"

    jshint: "latest"

    glob: 'latest'

    rimraf: 'latest'

    mkdirp: 'latest'

    watch: 'latest'
    
    'http-server': 'latest'
    
    'live-reload': 'latest'

    opener: 'latest'

    parallelshell: 'latest'

#####################################################################
scripts:

#=====================
    env: '
    
        env
    '
    
#=====================
    echo: '
    
        echo ""
    '

#=====================
    cson2json: '
    
        cson2json package.cson
        &&
        cson2json package.cson > package.json
    '

#=====================
    'prepare': '
        
        node
            build-tools/rimraf_glob.js
            node_modules/eventemitter3/_rjs/**
        &&
        node node_modules/requirejs/bin/r.js -convert
            node_modules/eventemitter3/
            node_modules/eventemitter3/_rjs/
    '
    
#=====================
    clean: '
    
        node
            build-tools/rimraf_glob.js
            build-output/*
    '

#=====================
    'prebuild': '
    
        npm run clean
    '
    
#=====================
    build: '
    
        npm run
            build:styles
        &&
        npm run
            build:scripts
    '
    
#=====================
    lint: '
    
        node
            build-tools/jshint_glob.js
            js/**.js
    '

#=====================
#    'prebuild:scripts': '
#    
#        npm run
#            lint
#    '
    
#=====================
    'build:scripts': '
    
        node node_modules/requirejs/bin/r.js
             -o
             build-config/RequireJS_config_multiple-bundles.js
        &&
        node node_modules/requirejs/bin/r.js
             -o
             build-config/RequireJS_config_single-bundle.js
    '

#=====================
    'prebuild:styles': '
    
        node node_modules/mkdirp/bin/cmd.js ./build-output/css/
    '
    
#=====================
    'build:styles': '
    
        cp ./static/sdk.css ./build-output/css/
    '

#=====================
#### BLOCKING! (CTRL-C) [watch][live-reload][http]
    example: '
        npm run
            clean
        &&
        echo > open_webbrowser.js
        &&
        parallelshell
            \"npm run live-reload\"
            \"npm run watch\"
            \"npm run http\"
    '

#=====================
#### BLOCKING! (CTRL-C) [watch:build]
    watch: '
    
        parallelshell
            \"npm run watch:build\"
    '
    #   \"npm run watch:test\

#=====================
#   'watch:test': 'karma start'

#=====================
#   test: 'karma start --singleRun'

#=====================
#### BLOCKING! (CTRL-C) [watch or nodemon]
    'watch:build': '
        watch
            \"npm run build
                && node build-tools/webbrowser.js
                && npm run webbrowser
                && rimraf open_webbrowser.js\"
            build-output-usage-example/
    '
    #    nodemon -q
    #    -w build-output-usage-example/
    #    --ext \".\"
    #    --exec \"npm run build
    #            && node build-tools/webbrowser.js 
    #            && npm run webbrowser
    #            && rimraf open_webbrowser.js\"
    
#=====================
    'http': '
    
        http-server -p 9090 ./
    '

#=====================
    'live-reload': '
    
        live-reload --port 9091 --delay 1000 build-output/
    '

#=====================
    'webbrowser': '
    
        opener http://localhost:9090/build-output-usage-example/
    '